# bot.py
import os
import json
from dotenv import load_dotenv
import random
from telegram import InputFile
from telegram.error import BadRequest
from telegram import Update
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from telegram.error import BadRequest
from datetime import datetime, timedelta, time as dt_time

# ------------------- –ù–ê–°–¢–†–û–ô–ö–ò -------------------
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

TASKS_FILE = "tasks.json"
REMINDERS_FILE = "reminders.json"
BIRTHDAYS_FILE = "birthdays.json"
EVENTS_FILE = "events.json"
TASKS_HISTORY_FILE = "tasks_history.json"

# ------------------- –£–¢–ò–õ–ò–¢–´ -------------------
def load_data(file):
    if os.path.exists(file):
        try:
            with open(file, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            return {}
    return {}

def save_data(file, data):
    with open(file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_user_id_from_update(update: Update) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π user_id (–∏—Å–ø–æ–ª—å–∑—É–µ–º effective_user)"""
    if update.effective_user:
        return str(update.effective_user.id)
    # fallback
    if hasattr(update, "callback_query") and update.callback_query:
        return str(update.callback_query.from_user.id)
    return "unknown"

def main_menu_keyboard():
    keyboard = [
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"],
        ["‚è∞ –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "üîî –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"],
        ["üìÖ –ú–æ–π –¥–µ–Ω—å", "üìÜ –ú–æ–π –º–µ—Å—è—Ü"],
        ["üéâ –°–æ–±—ã—Ç–∏—è", "üìñ 5 –º–∏–Ω—É—Ç"] 
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def send_or_edit(update: Update, text: str, reply_markup=None):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –í–∞–∂–Ω–æ: callback_query.edit_message_text –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ InlineKeyboardMarkup (inline).
    –ï—Å–ª–∏ –≤—ã–∑—ã–≤–∞–µ–º edit –∏–∑ callback –∏ –ø–µ—Ä–µ–¥–∞–Ω ReplyKeyboardMarkup (main menu), —Ç–æ:
      - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      - –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å main menu (ReplyKeyboardMarkup)
    –¢–∞–∫–∂–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ª–æ–≤–∏–º BadRequest("Message is not modified") –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
    """
    try:
        if update.message and update.message.text is not None:
            return await update.message.reply_text(text, reply_markup=reply_markup)
        elif update.callback_query:
            # callback
            if reply_markup is None or isinstance(reply_markup, InlineKeyboardMarkup):
                try:
                    return await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
                except BadRequest as e:
                    # –µ—Å–ª–∏ "message is not modified" ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                    msg = str(e)
                    if "Message is not modified" in msg:
                        return None
                    # –∏–Ω–∞—á–µ ‚Äî fallback: –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    return await update.callback_query.message.reply_text(text, reply_markup=reply_markup)
            else:
                # reply_markup ‚Äî ReplyKeyboardMarkup (main menu) ‚Äî –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è edit_message_text
                # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "not modified"),
                # –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
                try:
                    await update.callback_query.edit_message_text(text)
                except BadRequest:
                    pass
                return await update.callback_query.message.reply_text(text, reply_markup=reply_markup)
    except Exception:
        # –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å, –ø–æ—Å—Ç–∏–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
        try:
            if update.effective_chat:
                return await update.effective_chat.send_message(text)
        except Exception:
            return None

# ------------------- –•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• -------------------
tasks = load_data(TASKS_FILE)
reminders = load_data(REMINDERS_FILE)
birthdays = load_data(BIRTHDAYS_FILE)
events = load_data(EVENTS_FILE)
tasks_history = load_data(TASKS_HISTORY_FILE)

# ------------------- –°–û–°–¢–û–Ø–ù–ò–Ø CONVERSATION -------------------
ASK_TASK_DAY_TYPE, ASK_TASK_TEXT, ASK_TASK_OTHER_DATE = range(3)
ASK_REM_TYPE, ASK_REM_TEXT, ASK_REM_DATE, ASK_REM_TIME = range(4)
BDAY_NAME, BDAY_DATE, EVENT_TITLE, EVENT_DATE = range(6, 10)

# ------------------- START -------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (
         "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –¥–µ–Ω—å –∏ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –≤–∞–∂–Ω–æ–µ!\n\n"
        "–í–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å:\n"
        "üìù –î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –¥–µ–Ω—å, –∞ —Ç–∞–∫–∂–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –Ω–∞ –¥–Ω–∏ –≤–ø–µ—Ä–µ–¥ \n"
        "‚è∞ –°—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –Ω–∞ –¥–µ–Ω—å, –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –¥–µ–Ω—å –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "üéâ –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ–±—ã—Ç–∏—è –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –¥—Ä—É–∑–µ–π\n"
        "üìÑ –ü–æ–ª—É—á–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ 5-–º–∏–Ω—É—Ç–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É. –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –Ω–∞–∂–º–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )
       
    await send_or_edit(update, txt, reply_markup=main_menu_keyboard())

# ------------------- –ó–ê–î–ê–ß–ò -------------------
async def add_task_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = ReplyKeyboardMarkup([["–ù–∞ —Å–µ–≥–æ–¥–Ω—è", "–ù–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å"], ["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    await send_or_edit(update, "–í—ã–±–µ—Ä–∏—Ç–µ: –∑–∞–¥–∞—á–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å?", reply_markup=kb)
    return ASK_TASK_DAY_TYPE

async def add_task_day_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–ù–∞ —Å–µ–≥–æ–¥–Ω—è":
        context.user_data["task_day_type"] = "today"
        await send_or_edit(update, "‚úç –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:")
        return ASK_TASK_TEXT
    elif text == "–ù–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å":
        context.user_data["task_day_type"] = "other"
        await send_or_edit(update, "‚úç –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì:(–≥–æ–¥ –Ω—ã–Ω–µ—à–Ω–∏–π)")
        return ASK_TASK_OTHER_DATE
    else:
        return await cancel(update, context)

async def add_task_other_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_text = update.message.text.strip()
    try:
        d = datetime.strptime(date_text, "%d.%m.%Y").date()
        context.user_data["task_other_date"] = d
        await send_or_edit(update, "‚úç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã:")
        return ASK_TASK_TEXT
    except Exception:
        await send_or_edit(update, "‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –î–î.MM.–ì–ì–ì–ì –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.")
        return ASK_TASK_OTHER_DATE

async def add_task_receive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = get_user_id_from_update(update)
    if context.user_data.get("task_day_type") == "today":
        date_str = datetime.now().strftime("%Y-%m-%d")
    else:
        date_obj = context.user_data.get("task_other_date")
        date_str = date_obj.strftime("%Y-%m-%d")
    text = update.message.text
    tasks.setdefault(user_id, []).append({"text": text, "done": False, "date": date_str})
    save_data(TASKS_FILE, tasks)
    await send_or_edit(update, f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {text}", reply_markup=main_menu_keyboard())
    context.user_data.pop("task_day_type", None)
    context.user_data.pop("task_other_date", None)
    return ConversationHandler.END

async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = get_user_id_from_update(update)
    today = datetime.now().strftime("%Y-%m-%d")
    user_tasks = tasks.get(user_id, [])
    today_tasks = [t for t in user_tasks if t.get("date") == today]
    other_tasks = [t for t in user_tasks if t.get("date") != today]

    msg = "üìã –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
    kb = []
    if today_tasks:
        for i, t in enumerate(today_tasks, 1):
            status = "‚úÖ" if t.get("done") else "‚ùå"
            msg += f"{i}. {t.get('text','')} {status}\n"
            if not t.get("done"):
                kb.append([InlineKeyboardButton("‚úî –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"task:today:done:{i-1}"),
                           InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"task:today:del:{i-1}")])
            else:
                # –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
                kb.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"task:today:del:{i-1}")])
    else:
        msg += "–ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"

    msg += "\nüìã –ó–∞–¥–∞—á–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ –¥–Ω–∏:\n"
    if other_tasks:
        for i, t in enumerate(other_tasks, 1):
            status = "‚úÖ" if t.get("done") else "‚ùå"
            date_str = datetime.strptime(t.get("date"), "%Y-%m-%d").strftime("%d.%m.%Y")
            msg += f"{i}. {t.get('text','')} ({date_str}) {status}\n"
            if not t.get("done"):
                kb.append([InlineKeyboardButton("‚úî –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"task:other:done:{i-1}"),
                           InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"task:other:del:{i-1}")])
            else:
                kb.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"task:other:del:{i-1}")])
    else:
        msg += "–ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ –¥—Ä—É–≥–∏–µ –¥–Ω–∏\n"

    # –ï—Å–ª–∏ –µ—Å—Ç—å inline-–∫–Ω–æ–ø–∫–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∫–∞–∫ —Ä–∞–Ω—å—à–µ.
    if kb:
        await send_or_edit(update, msg, reply_markup=InlineKeyboardMarkup(kb))
        return

    # –ï—Å–ª–∏ inline-–∫–Ω–æ–ø–æ–∫ –Ω–µ—Ç ‚Äî —Ö–æ—Ç–∏–º –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ã—á–Ω—ã–º –º–µ–Ω—é –æ–¥–∏–Ω —Ä–∞–∑.
    # –ü—Ä–∏ callback_query: —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ inline-—Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ),
    # –∞ –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å main_menu_keyboard().
    if hasattr(update, "callback_query") and update.callback_query:
        try:
            # –ø–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–π –≤—ã–¥–∞—á–∏
            await update.callback_query.message.delete()
        except Exception:
            # –µ—Å–ª–∏ —É–¥–∞–ª–∏—Ç—å –Ω–µ–ª—å–∑—è ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å send_or_edit –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            try:
                await send_or_edit(update, msg, reply_markup=main_menu_keyboard())
            except Exception:
                # –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç –Ω–∞–ø—Ä—è–º—É—é
                if update.effective_chat:
                    await update.effective_chat.send_message(msg, reply_markup=main_menu_keyboard())
            return

        # –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π (–∏–ª–∏ —Ç–µ—Ä–ø–∏–º–æ–π) –ø–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        if update.effective_chat:
            await update.effective_chat.send_message(msg, reply_markup=main_menu_keyboard())
        else:
            # –µ—Å–ª–∏ –Ω–µ—Ç effective_chat ‚Äî fallback —á–µ—Ä–µ–∑ send_or_edit
            await send_or_edit(update, msg, reply_markup=main_menu_keyboard())
    else:
        # –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π (–Ω–µ callback) –≤—ã–∑–æ–≤ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º send_or_edit –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        await send_or_edit(update, msg, reply_markup=main_menu_keyboard())


async def task_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split(":")  # e.g. task:today:done:0
    if len(data) != 4:
        await list_tasks(update, context)
        return
    _, group, action, idx_str = data
    try:
        idx = int(idx_str)
    except:
        await list_tasks(update, context)
        return

    user_id = get_user_id_from_update(update)
    user_tasks = tasks.get(user_id, [])
    today = datetime.now().strftime("%Y-%m-%d")
    today_tasks = [t for t in user_tasks if t.get("date") == today]
    other_tasks = [t for t in user_tasks if t.get("date") != today]

    source = today_tasks if group == "today" else other_tasks
    if idx < 0 or idx >= len(source):
        await list_tasks(update, context)
        return

    entry = source[idx]
    # find original index
    orig_index = None
    for oi, t in enumerate(user_tasks):
        if t is entry or (t.get("text") == entry.get("text") and t.get("date") == entry.get("date")):
            orig_index = oi
            break
    if orig_index is None:
        await list_tasks(update, context)
        return

    if action == "done":
        tasks[user_id][orig_index]["done"] = True
        save_data(TASKS_FILE, tasks)
        await list_tasks(update, context)
    elif action == "del":
        tasks[user_id].pop(orig_index)
        save_data(TASKS_FILE, tasks)
        await list_tasks(update, context)

# ------------------- –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø -------------------
async def add_reminder_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = ReplyKeyboardMarkup([["–ù–∞ —Å–µ–≥–æ–¥–Ω—è", "–ù–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å"], ["–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", "–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    await send_or_edit(update, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=kb)
    return ASK_REM_TYPE

async def add_reminder_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    if choice not in ["–ù–∞ —Å–µ–≥–æ–¥–Ω—è", "–ù–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å", "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ"]:
        return await cancel(update, context)
    
    context.user_data["rem_type"] = choice
    await send_or_edit(update, "‚úç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
    return ASK_REM_TEXT

async def add_reminder_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["rem_text"] = update.message.text.strip()
    rtype = context.user_data.get("rem_type")

    if rtype == "–ù–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å":
        await send_or_edit(update, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì:(–≥–æ–¥ –Ω–∞—Å—Ç–æ—è—â–∏–π)", reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
        return ASK_REM_DATE
    else:
        await send_or_edit(update, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30):", reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
        return ASK_REM_TIME

async def add_reminder_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_str = update.message.text.strip()
    try:
        d = datetime.strptime(date_str, "%d.%m.%Y").date()
        context.user_data["rem_date"] = d.strftime("%Y-%m-%d")
        await send_or_edit(update, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30):", reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
        return ASK_REM_TIME
    except Exception:
        await send_or_edit(update, "‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –î–î.MM.–ì–ì–ì–ì –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.")
        return ASK_REM_DATE

async def add_reminder_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = get_user_id_from_update(update)
    text = context.user_data.get("rem_text")
    rtype = context.user_data.get("rem_type")
    date_val = context.user_data.get("rem_date") if rtype == "–ù–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å" else None
    time_str = update.message.text.strip()
    try:
        h, m = map(int, time_str.split(":"))
        t_formatted = f"{h:02d}:{m:02d}"
        reminder = {
            "text": text,
            "time": t_formatted,
            "type": rtype,
            "enabled": True,
            "fired_today": False
        }
        if date_val:
            reminder["date"] = date_val
        reminders.setdefault(user_id, []).append(reminder)
        save_data(REMINDERS_FILE, reminders)
        await send_or_edit(update, f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ¬´{text}¬ª –≤ {t_formatted}", reply_markup=main_menu_keyboard())

        context.user_data.pop("rem_text", None)
        context.user_data.pop("rem_type", None)
        context.user_data.pop("rem_date", None)
        return ConversationHandler.END
    except Exception:
        await send_or_edit(update, "‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ß–ß:–ú–ú –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.")
        return ASK_REM_TIME

async def reminder_checker(context: ContextTypes.DEFAULT_TYPE):
    now_hm = datetime.now().strftime("%H:%M")
    for user_id, rem_list in list(reminders.items()):
        for rem in list(rem_list):
            if rem.get("enabled") and rem.get("time") == now_hm and not rem.get("fired_today"):
                try:
                    await context.bot.send_message(int(user_id), f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {rem['text']}")
                except Exception:
                    pass
                if rem.get("type") == "–ù–∞ —Å–µ–≥–æ–¥–Ω—è":
                    rem_list.remove(rem)
                else:
                    rem["fired_today"] = True
        save_data(REMINDERS_FILE, reminders)

async def list_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = get_user_id_from_update(update)
    user_reminders = reminders.get(user_id, [])
    today = datetime.now().strftime("%Y-%m-%d")

    today_rem = []
    other_rem = []

    for r in user_reminders:
        if r.get("type") == "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ" or r.get("type") == "–ù–∞ —Å–µ–≥–æ–¥–Ω—è":
            today_rem.append(r)
        else:
            other_rem.append(r)

    msg = "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
    kb = []

    msg += "üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
    if today_rem:
        for i, r in enumerate(today_rem, 1):
            status = "‚úÖ" if r.get("fired_today") else "‚ùå"
            type_note = "(–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)" if r.get("type") == "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ" else ""
            msg += f"{i}. {r.get('text','')} ({r.get('time','')} {type_note}) {status}\n"
            if r.get("type") == "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ":
                if r.get("enabled", True):
                    kb.append([InlineKeyboardButton("‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"rem:stop:{user_reminders.index(r)}"),
                               InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"rem:del:{user_reminders.index(r)}")])
                else:
                    kb.append([InlineKeyboardButton("‚ñ∂ –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", callback_data=f"rem:start:{user_reminders.index(r)}"),
                               InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"rem:del:{user_reminders.index(r)}")])
            else:
                kb.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"rem:del:{user_reminders.index(r)}")])
    else:
        msg += "–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"

    msg += "\nüìÖ –ù–∞ –¥—Ä—É–≥–∏–µ –¥–Ω–∏:\n"
    if other_rem:
        for i, r in enumerate(other_rem, 1):
            date_str = r.get("date", "?")
            status = "‚úÖ" if r.get("fired_today") else "‚ùå"
            msg += f"{i}. {r.get('text','')} ({date_str}, {r.get('time','')}) {status}\n"
            kb.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"rem:del:{user_reminders.index(r)}")])
    else:
        msg += "–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ –¥—Ä—É–≥–∏–µ –¥–Ω–∏\n"

    if kb:
        await send_or_edit(update, msg, reply_markup=InlineKeyboardMarkup(kb))
        return

    if hasattr(update, "callback_query") and update.callback_query:
        try:
            await update.callback_query.message.delete()
        except Exception:
            try:
                await send_or_edit(update, msg, reply_markup=main_menu_keyboard())
            except Exception:
                if update.effective_chat:
                    await update.effective_chat.send_message(msg, reply_markup=main_menu_keyboard())
            return

        if update.effective_chat:
            await update.effective_chat.send_message(msg, reply_markup=main_menu_keyboard())
        else:
            await send_or_edit(update, msg, reply_markup=main_menu_keyboard())
    else:
        await send_or_edit(update, msg, reply_markup=main_menu_keyboard())

async def rem_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    parts = query.data.split(":")
    if len(parts) != 3:
        await list_reminders(update, context)
        return
    _, action, idx_str = parts
    try:
        idx = int(idx_str)
    except:
        await list_reminders(update, context)
        return
    user_id = get_user_id_from_update(update)
    rlist = reminders.get(user_id, [])
    if idx < 0 or idx >= len(rlist):
        await list_reminders(update, context)
        return
    if action == "stop":
        rlist[idx]["enabled"] = False
    elif action == "start":
        rlist[idx]["enabled"] = True
    elif action == "del":
        rlist.pop(idx)
    save_data(REMINDERS_FILE, reminders)
    await list_reminders(update, context)

# ------------------- –†–ê–ù–î–û–ú –§–ê–ô–õ–´ ----------------

async def send_random_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    PDF_DIR = "pdfs"  # –ø–∞–ø–∫–∞ —Å —Ñ–∞–π–ª–∞–º–∏

    if not os.path.exists(PDF_DIR):
        await update.message.reply_text("‚ö† –ü–∞–ø–∫–∞ —Å PDF –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu_keyboard())
        return

    pdf_files = [f for f in os.listdir(PDF_DIR) if f.lower().endswith(".pdf")]
    if not pdf_files:
        await update.message.reply_text("‚ö† PDF —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=main_menu_keyboard())
        return

    chosen_pdf = random.choice(pdf_files)
    file_path = os.path.join(PDF_DIR, chosen_pdf)

    try:
        # –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏ –ø–µ—Ä–µ–¥–∞—ë–º –æ–±—ä–µ–∫—Ç
        with open(file_path, "rb") as f:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=f,
                filename=chosen_pdf
            )
    except Exception as e:
        await update.message.reply_text(
            f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}",
            reply_markup=main_menu_keyboard()
        )

# ------------------- –°–û–ë–´–¢–ò–Ø -------------------
async def events_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = ReplyKeyboardMarkup([["üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "üìå –ò–≤–µ–Ω—Ç"], ["üìÖ –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π", "–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    await send_or_edit(update, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Å–æ–±—ã—Ç–∏—è–º–∏:", reply_markup=kb)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
async def start_add_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_or_edit(update, "‚úç –í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞ (–∏–º—è –∏/–∏–ª–∏ —Ñ–∞–º–∏–ª–∏—è):", reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
    return BDAY_NAME

async def receive_birthday_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["birthday_name"] = update.message.text.strip()
    await send_or_edit(update, "‚úç –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 26.09.2025,(–≥–æ–¥ –Ω—ã–Ω–µ—à–Ω–∏–π)):", reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
    return BDAY_DATE

async def receive_birthday_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = get_user_id_from_update(update)
    name = context.user_data.get("birthday_name")
    try:
        d = datetime.strptime(update.message.text.strip(), "%d.%m.%Y").date()
        birthdays.setdefault(user_id, []).append({"name": name, "date": d.strftime("%Y-%m-%d")})
        save_data(BIRTHDAYS_FILE, birthdays)
        await send_or_edit(update, f"‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω: {name} ‚Äî {d.strftime('%d.%m.%Y')}", reply_markup=main_menu_keyboard())
        context.user_data.pop("birthday_name", None)
        return ConversationHandler.END
    except Exception:
        await send_or_edit(update, "‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –î–î.MM.–ì–ì–ì–ì –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.")
        return BDAY_DATE

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞
async def start_add_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_or_edit(update, "‚úç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:", reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
    return EVENT_TITLE

async def receive_event_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["event_title"] = update.message.text.strip()
    await send_or_edit(update, "‚úç –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì:", reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
    return EVENT_DATE

async def receive_event_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = get_user_id_from_update(update)
    title = context.user_data.get("event_title")
    try:
        d = datetime.strptime(update.message.text.strip(), "%d.%m.%Y").date()
        events.setdefault(user_id, []).append({"title": title, "date": d.strftime("%Y-%m-%d")})
        save_data(EVENTS_FILE, events)
        await send_or_edit(update, f"‚úÖ –ò–≤–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {title} ‚Äî {d.strftime('%d.%m.%Y')}", reply_markup=main_menu_keyboard())
        context.user_data.pop("event_title", None)
        return ConversationHandler.END
    except Exception:
        await send_or_edit(update, "‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –î–î.MM.–ì–ì–ì–ì –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.")
        return EVENT_DATE

async def build_events_list(user_id: str):
    today_str = datetime.now().strftime("%Y-%m-%d")
    all_events = []

    # we keep references to current indices in original lists
    for i, b in enumerate(birthdays.get(user_id, [])):
        all_events.append({"id": f"b{i}", "type": "birthday", "name": b["name"], "date": b["date"]})
    for i, e in enumerate(events.get(user_id, [])):
        all_events.append({"id": f"e{i}", "type": "event", "title": e["title"], "date": e["date"]})

    if not all_events:
        return "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π.", None

    all_events.sort(key=lambda x: x["date"])

    msg_lines = []
    buttons = []
    for i, ev in enumerate(all_events, 1):
        dt = datetime.strptime(ev["date"], "%Y-%m-%d")
        note = "üéâ –°–µ–≥–æ–¥–Ω—è!" if ev["date"] == today_str else ""
        if ev["type"] == "birthday":
            msg_lines.append(f"{i}. üéÇ {ev['name']} - {dt.strftime('%d.%m.%Y')} {note}")
            buttons.append([InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {ev['name']}", callback_data=f"del_{ev['id']}")])
        else:
            msg_lines.append(f"{i}. üìå {ev['title']} - {dt.strftime('%d.%m.%Y')} {note}")
            buttons.append([InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {ev['title']}", callback_data=f"del_{ev['id']}")])

    text = "\n".join(msg_lines)
    return text, InlineKeyboardMarkup(buttons)

async def list_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = get_user_id_from_update(update)
    text, kb = await build_events_list(user_id)
    await send_or_edit(update, text, reply_markup=kb or main_menu_keyboard())

async def delete_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = get_user_id_from_update(update)
    # callback data format: del_b0 or del_e1
    try:
        _, ev_id = query.data.split("_", 1)
    except Exception:
        await list_events(update, context)
        return
    if ev_id.startswith("b"):
        idx = int(ev_id[1:])
        if user_id in birthdays and 0 <= idx < len(birthdays[user_id]):
            birthdays[user_id].pop(idx)
            save_data(BIRTHDAYS_FILE, birthdays)
    elif ev_id.startswith("e"):
        idx = int(ev_id[1:])
        if user_id in events and 0 <= idx < len(events[user_id]):
            events[user_id].pop(idx)
            save_data(EVENTS_FILE, events)

    # –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text, kb = await build_events_list(user_id)
    # edit original message; if no events left - edit text and then send main menu
    try:
        if kb:
            await query.edit_message_text(text, reply_markup=kb)
        else:
            # edit message to "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π."
            await query.edit_message_text(text)
            # send menu as a separate message with ReplyKeyboardMarkup
            await query.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
    except BadRequest as e:
        # fallback: –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        try:
            await query.message.reply_text(text, reply_markup=kb or main_menu_keyboard())
        except Exception:
            pass

# ------------------- –ú–û–ô –î–ï–ù–¨ –∏ –ú–û–ô –ú–ï–°–Ø–¶ -------------------
async def my_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = get_user_id_from_update(update)
    today = datetime.now().strftime("%Y-%m-%d")
    today_tasks = [t for t in tasks.get(user_id, []) if t.get("date") == today]
    msg = "üìÖ –ú–æ–π –¥–µ–Ω—å\n\nüìã –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
    if today_tasks:
        for i, t in enumerate(today_tasks, 1):
            status = "‚úÖ" if t.get("done") else "‚ùå"
            msg += f"{i}. {t.get('text','')} {status}\n"
    else:
        msg += "–ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"

    msg += "\nüéâ –°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
    today_events = []
    for b in birthdays.get(user_id, []):
        if b.get("date") == today:
            today_events.append(("birthday", b.get("name")))
    for e in events.get(user_id, []):
        if e.get("date") == today:
            today_events.append(("event", e.get("title")))
    if today_events:
        for i, ev in enumerate(today_events, 1):
            icon = "üéÇ" if ev[0] == "birthday" else "üìå"
            msg += f"{i}. {icon} {ev[1]}\n"
    else:
        msg += "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
    await send_or_edit(update, msg, reply_markup=main_menu_keyboard())

async def my_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = get_user_id_from_update(update)
    month_prefix = datetime.now().strftime("%Y-%m")
    msg = "üìÜ –ú–æ–π –º–µ—Å—è—Ü\n\nüìã –ó–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:\n"
    month_tasks = [t for t in tasks.get(user_id, []) if t.get("date","").startswith(month_prefix)]
    if month_tasks:
        for i, t in enumerate(month_tasks, 1):
            date_str = datetime.strptime(t["date"], "%Y-%m-%d").strftime("%d.%m.%Y")
            status = "‚úÖ" if t.get("done") else "‚ùå"
            msg += f"{i}. {t.get('text','')} ({date_str}) {status}\n"
    else:
        msg += "–ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü\n"

    msg += "\nüéâ –°–æ–±—ã—Ç–∏—è –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:\n"
    month_events = []
    for b in birthdays.get(user_id, []):
        if b.get("date","").startswith(month_prefix):
            month_events.append(("birthday", b.get("name"), b.get("date")))
    for e in events.get(user_id, []):
        if e.get("date","").startswith(month_prefix):
            month_events.append(("event", e.get("title"), e.get("date")))
    month_events.sort(key=lambda x: x[2])
    if month_events:
        for i, ev in enumerate(month_events, 1):
            icon = "üéÇ" if ev[0]=="birthday" else "üìå"
            dt = datetime.strptime(ev[2], "%Y-%m-%d")
            msg += f"{i}. {icon} {ev[1]} ({dt.strftime('%d.%m.%Y')})\n"
    else:
        msg += "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü\n"
    await send_or_edit(update, msg, reply_markup=main_menu_keyboard())

# ------------------- –°–ë–†–û–° / –ï–ñ–ï–î–ù–ï–í–ù–´–ï –ó–ê–î–ê–ß–ò -------------------
def schedule_daily_reset(app):
    async def reset_tasks(context: ContextTypes.DEFAULT_TYPE):
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–¥–∞—á –≤ tasks_history, –∑–∞—Ç–µ–º –æ—á–∏—â–∞–µ–º today's tasks
        for user_id, user_tasks in list(tasks.items()):
            if user_tasks:
                tasks_history.setdefault(user_id, []).append({
                    "date": datetime.now().strftime("%Y-%m-%d"),
                    "tasks": user_tasks
                })
        save_data(TASKS_HISTORY_FILE, tasks_history)
        # –æ—á–∏—â–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ (user —Ö–æ—Ç–µ–ª —Å–±—Ä–æ—Å –ø–æ—Å–ª–µ 23:55). –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Ç–æ–ª—å–∫–æ –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—à–ª—ã–µ ‚Äî –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.
        tasks.clear()
        save_data(TASKS_FILE, tasks)
        # —Å–±—Ä–æ—Å fired_today —É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        for user_id, rem_list in reminders.items():
            for rem in rem_list:
                if rem.get("type") == "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ":
                    rem["fired_today"] = False
        save_data(REMINDERS_FILE, reminders)

    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ 23:55 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    try:
        app.job_queue.run_daily(reset_tasks, dt_time(hour=23, minute=55))
    except Exception:
        pass

# ------------------- CANCEL -------------------
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ inline-–∫–Ω–æ–ø–∫–∏ (callback_query).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç ConversationHandler.
    –ù–µ –æ—á–∏—â–∞–µ–º –≤–µ—Å—å context.user_data (—ç—Ç–æ –ª–æ–º–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ConversationHandler).
    """
    # –µ—Å–ª–∏ —ç—Ç–æ callback (–Ω–∞–∂–∞—Ç–∏–µ inline-–∫–Ω–æ–ø–∫–∏)
    if update.callback_query:
        cq = update.callback_query
        # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ callback_query, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –Ω–µ –æ—Å—Ç–∞–≤–∏–ª –µ–≥–æ –≤ –ø–æ–¥–≤–µ—à–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        try:
            await cq.answer()
        except Exception:
            pass

        # –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—É–¥–∞–ª–∏—Ç—å inline-–∫–Ω–æ–ø–∫–∏)
        try:
            await cq.edit_message_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
        except BadRequest:
            # –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –ø—Ä–æ—Å—Ç–æ–π reply
            try:
                await cq.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
            except Exception:
                pass

        # –æ—Ç–ø—Ä–∞–≤–∏–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (ReplyKeyboardMarkup)
        try:
            await cq.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
        except Exception:
            try:
                if update.effective_chat:
                    await update.effective_chat.send_message("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())
            except Exception:
                pass

    # –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –û—Ç–º–µ–Ω–∞)
    elif update.message:
        try:
            await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard())
        except Exception:
            pass

    # –£–î–ê–õ–ò–¢–ï context.user_data.clear() ‚Äî –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∫–ª—é—á–∏, —á—Ç–æ –º—ã —Å–∞–º–∏ —Å–æ–∑–¥–∞–≤–∞–ª–∏
    for k in (
        "task_day_type", "task_other_date",
        "rem_text", "rem_type", "rem_date",
        "birthday_name", "event_title"
    ):
        context.user_data.pop(k, None)

    return ConversationHandler.END


# ------------------- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–ï–ù–î–õ–ï–†–û–í –ò –ó–ê–ü–£–°–ö -------------------
def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    global tasks, reminders, birthdays, events, tasks_history
    tasks = load_data(TASKS_FILE)
    reminders = load_data(REMINDERS_FILE)
    birthdays = load_data(BIRTHDAYS_FILE)
    events = load_data(EVENTS_FILE)
    tasks_history = load_data(TASKS_HISTORY_FILE)

    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∞ /start
    app.add_handler(CommandHandler("start", start))

    # Tasks conversation
    task_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É$"), add_task_start)],
        states={
            ASK_TASK_DAY_TYPE: [
                MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel),
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_task_day_type)
            ],
            ASK_TASK_OTHER_DATE: [
                MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel),
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_task_other_date)
            ],
            ASK_TASK_TEXT: [
                MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel),
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_task_receive)
            ],
        },
        fallbacks=[MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel)],
        per_message=False
    )
    app.add_handler(task_conv)
    app.add_handler(MessageHandler(filters.Regex("^üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏$"), list_tasks))
    app.add_handler(CallbackQueryHandler(task_callback, pattern="^task:"))

    # Reminders conversation
    reminder_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚è∞ –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ$"), add_reminder_start)],
        states={
            ASK_REM_TYPE: [
                MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel),
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_reminder_type)
            ],
            ASK_REM_TEXT: [
                MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel),
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_reminder_text)
            ],
            ASK_REM_DATE: [
                MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel),
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_reminder_date)
            ],
            ASK_REM_TIME: [
                MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel),
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_reminder_time)
            ],
        },
        fallbacks=[MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel)],
        per_message=False
    )
    app.add_handler(reminder_conv)
    app.add_handler(MessageHandler(filters.Regex("^üîî –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è$"), list_reminders))
    app.add_handler(CallbackQueryHandler(rem_callback, pattern="^rem:"))

    # Events conversation & handlers
    app.add_handler(MessageHandler(filters.Regex("^üéâ –°–æ–±—ã—Ç–∏—è$"), events_menu))

    birthday_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è$"), start_add_birthday)],
        states={
            BDAY_NAME: [
                MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel),
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_birthday_name)
            ],
            BDAY_DATE: [
                MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel),
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_birthday_date)
            ],
        },
        fallbacks=[MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel)],
        per_message=False
    )
    app.add_handler(birthday_conv)

    event_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìå –ò–≤–µ–Ω—Ç$"), start_add_event)],
        states={
            EVENT_TITLE: [
                MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel),
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_event_title)
            ],
            EVENT_DATE: [
                MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel),
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_event_date)
            ],
        },
        fallbacks=[MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel)],
        per_message=False
    )
    app.add_handler(event_conv)

    # –ö–Ω–æ–ø–∫–∞ 5 –º–∏–Ω—É—Ç
    app.add_handler(MessageHandler(filters.Regex("^üìñ 5 –º–∏–Ω—É—Ç$"), send_random_pdf))

    # List / delete events
    app.add_handler(MessageHandler(filters.Regex("^üìÖ –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π$"), list_events))
    app.add_handler(CallbackQueryHandler(delete_event, pattern="^del_"))

    # Day / Month
    app.add_handler(MessageHandler(filters.Regex("^üìÖ –ú–æ–π –¥–µ–Ω—å$"), my_day))
    app.add_handler(MessageHandler(filters.Regex("^üìÜ –ú–æ–π –º–µ—Å—è—Ü$"), my_month))

    # ----------------------
    # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –û—Ç–º–µ–Ω–∞ (—Ç–µ–∫—Å—Ç–æ–≤–∞—è)
    # –û–±—Ä–∞–±–æ—Ç–∞–µ—Ç "–û—Ç–º–µ–Ω–∞" –≤ —Å–∏—Ç—É–∞—Ü–∏—è—Ö, –∫–æ–≥–¥–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ ConversationHandler,
    # –Ω–∞–ø—Ä–∏–º–µ—Ä: –º–µ–Ω—é "üéâ –°–æ–±—ã—Ç–∏—è" (–æ–±—ã—á–Ω–∞—è ReplyKeyboardMarkup).
    # –î–æ–±–∞–≤–ª—è–µ–º –ü–û–°–õ–ï —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö ConversationHandler'–æ–≤, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –∏—Ö fallback'–∞–º–∏.
    app.add_handler(MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel))
    # ----------------------

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    try:
        app.job_queue.run_repeating(reminder_checker, interval=60, first=5)
    except Exception:
        pass

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å (23:55)
    schedule_daily_reset(app)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    PORT = int(os.environ.get("PORT", 8443))  # Render –∑–∞–¥–∞—ë—Ç PORT
    RENDER_URL = "https://telegram-bot-zk6v.onrender.com"  # üëâ –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Render URL

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TELEGRAM_TOKEN,
        webhook_url=f"{RENDER_URL}/{TELEGRAM_TOKEN}"
    )


if __name__ == "__main__":
    main()
